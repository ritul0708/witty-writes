import ArticleList from "@/components/ArticleList";
import CategoryTab from "@/components/CategoryTab";
import Pagination from "@/components/Pagination";
import { fetchArticles, fetchCategories } from "@/http";
import { IArticle, ICategory, ICollectionResponse, IPagination, IQueryOptions } from "@/types";
import { AxiosResponse } from "axios";
import type { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import qs from 'qs';
import { useRouter } from "next/router";
import { debounce } from "@/utils";

interface IPropTypes {
  categories: {
    items: ICategory[]
  },
  articles: {
    items: IArticle[]
    pagination: IPagination;
  },
}

const Home: NextPage<IPropTypes> = ({ categories, articles }) => {
  const router = useRouter();
  const {page, pageCount} = articles.pagination;

  const handleSearch = (query: string) => {
    router.push(`/?search=${query}`);
  };

  // const handleSearch = (query: string) => {
  //   router.push(`/?search=${query}`);
  // };

  // console.log(categories);
  // console.log('***********************');
  console.log(articles);
  // console.log('*****************************');
  // console.log(authors);
  return (
    <div>
      <Head>
        <title>Witty Writes HomePage</title>
        <meta name="description" content="generated by nextjs and typescript" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <CategoryTab 
        categories = {categories.items} 
        handleSearch = {debounce(handleSearch, 500)}
      />
      <ArticleList articles = {articles.items} />
      <Pagination page={page} pageCount={pageCount} />
    </div>
  )
};

export const getServerSideProps: GetServerSideProps = async ({ query }) => {
  console.log('.....searching')
  const options: Partial<IQueryOptions> = {
    populate: ['author.avatar'],
    sort: ['id:desc'],
    pagination: {
      page: query.page ? +query.page : 1,
      pageSize: 1
    }
  };

  if (query.search) {
    options.filters = {
      Title: {
        $contains: query.search,
      },
    };
  }

  const queryString = qs.stringify(options);
  // console.log(queryString);

  // categories
  const { data: categories }: AxiosResponse<ICollectionResponse<ICategory[]>> = await fetchCategories();
  // console.log(categories.data);

  // articles
  const { data: articles }: AxiosResponse<ICollectionResponse<IArticle[]>> = await fetchArticles(queryString);
  // console.log(articles.data);


  return {
    props: {
      categories: {
        items: categories.data,
      },
      articles: {
        items: articles.data,
        pagination: articles.meta.pagination,
      },
    }
  }
}

export default Home;